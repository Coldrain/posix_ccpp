/* soapStub.h
   Generated by gSOAP 2.8.14 from weather.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"http://WebXml.com.cn/"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20814
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_ns1__ArrayOfString
#define SOAP_TYPE_ns1__ArrayOfString (9)
/* ns1:ArrayOfString */
class SOAP_CMAC ns1__ArrayOfString
{
public:
	std::vector<std::string >string;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE_ns1__ArrayOfString */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfString() { ns1__ArrayOfString::soap_default(NULL); }
	virtual ~ns1__ArrayOfString() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getSupportCity
#define SOAP_TYPE__ns1__getSupportCity (10)
/* ns1:getSupportCity */
class SOAP_CMAC _ns1__getSupportCity
{
public:
	std::string *byProvinceName;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE__ns1__getSupportCity */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getSupportCity() { _ns1__getSupportCity::soap_default(NULL); }
	virtual ~_ns1__getSupportCity() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getSupportCityResponse
#define SOAP_TYPE__ns1__getSupportCityResponse (11)
/* ns1:getSupportCityResponse */
class SOAP_CMAC _ns1__getSupportCityResponse
{
public:
	ns1__ArrayOfString *getSupportCityResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ArrayOfString */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE__ns1__getSupportCityResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getSupportCityResponse() { _ns1__getSupportCityResponse::soap_default(NULL); }
	virtual ~_ns1__getSupportCityResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getSupportProvince
#define SOAP_TYPE__ns1__getSupportProvince (12)
/* ns1:getSupportProvince */
class SOAP_CMAC _ns1__getSupportProvince
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE__ns1__getSupportProvince */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getSupportProvince() { _ns1__getSupportProvince::soap_default(NULL); }
	virtual ~_ns1__getSupportProvince() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getSupportProvinceResponse
#define SOAP_TYPE__ns1__getSupportProvinceResponse (13)
/* ns1:getSupportProvinceResponse */
class SOAP_CMAC _ns1__getSupportProvinceResponse
{
public:
	ns1__ArrayOfString *getSupportProvinceResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ArrayOfString */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE__ns1__getSupportProvinceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getSupportProvinceResponse() { _ns1__getSupportProvinceResponse::soap_default(NULL); }
	virtual ~_ns1__getSupportProvinceResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getSupportDataSet
#define SOAP_TYPE__ns1__getSupportDataSet (14)
/* ns1:getSupportDataSet */
class SOAP_CMAC _ns1__getSupportDataSet
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE__ns1__getSupportDataSet */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getSupportDataSet() { _ns1__getSupportDataSet::soap_default(NULL); }
	virtual ~_ns1__getSupportDataSet() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getSupportDataSetResponse_getSupportDataSetResult
#define SOAP_TYPE__ns1__getSupportDataSetResponse_getSupportDataSetResult (26)
/* ns1:getSupportDataSetResponse-getSupportDataSetResult */
class SOAP_CMAC _ns1__getSupportDataSetResponse_getSupportDataSetResult
{
public:
	char *xsd__schema;	/* required element of type xsd:schema */
	char *__any;
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE__ns1__getSupportDataSetResponse_getSupportDataSetResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getSupportDataSetResponse_getSupportDataSetResult() { _ns1__getSupportDataSetResponse_getSupportDataSetResult::soap_default(NULL); }
	virtual ~_ns1__getSupportDataSetResponse_getSupportDataSetResult() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getSupportDataSetResponse
#define SOAP_TYPE__ns1__getSupportDataSetResponse (15)
/* ns1:getSupportDataSetResponse */
class SOAP_CMAC _ns1__getSupportDataSetResponse
{
public:
	_ns1__getSupportDataSetResponse_getSupportDataSetResult *getSupportDataSetResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:getSupportDataSetResponse-getSupportDataSetResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE__ns1__getSupportDataSetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getSupportDataSetResponse() { _ns1__getSupportDataSetResponse::soap_default(NULL); }
	virtual ~_ns1__getSupportDataSetResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getWeatherbyCityName
#define SOAP_TYPE__ns1__getWeatherbyCityName (16)
/* ns1:getWeatherbyCityName */
class SOAP_CMAC _ns1__getWeatherbyCityName
{
public:
	std::string *theCityName;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE__ns1__getWeatherbyCityName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getWeatherbyCityName() { _ns1__getWeatherbyCityName::soap_default(NULL); }
	virtual ~_ns1__getWeatherbyCityName() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getWeatherbyCityNameResponse
#define SOAP_TYPE__ns1__getWeatherbyCityNameResponse (17)
/* ns1:getWeatherbyCityNameResponse */
class SOAP_CMAC _ns1__getWeatherbyCityNameResponse
{
public:
	ns1__ArrayOfString *getWeatherbyCityNameResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ArrayOfString */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE__ns1__getWeatherbyCityNameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getWeatherbyCityNameResponse() { _ns1__getWeatherbyCityNameResponse::soap_default(NULL); }
	virtual ~_ns1__getWeatherbyCityNameResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getWeatherbyCityNamePro
#define SOAP_TYPE__ns1__getWeatherbyCityNamePro (18)
/* ns1:getWeatherbyCityNamePro */
class SOAP_CMAC _ns1__getWeatherbyCityNamePro
{
public:
	std::string *theCityName;	/* optional element of type xsd:string */
	std::string *theUserID;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE__ns1__getWeatherbyCityNamePro */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getWeatherbyCityNamePro() { _ns1__getWeatherbyCityNamePro::soap_default(NULL); }
	virtual ~_ns1__getWeatherbyCityNamePro() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getWeatherbyCityNameProResponse
#define SOAP_TYPE__ns1__getWeatherbyCityNameProResponse (19)
/* ns1:getWeatherbyCityNameProResponse */
class SOAP_CMAC _ns1__getWeatherbyCityNameProResponse
{
public:
	ns1__ArrayOfString *getWeatherbyCityNameProResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ArrayOfString */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE__ns1__getWeatherbyCityNameProResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getWeatherbyCityNameProResponse() { _ns1__getWeatherbyCityNameProResponse::soap_default(NULL); }
	virtual ~_ns1__getWeatherbyCityNameProResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__DataSet
#define SOAP_TYPE__ns1__DataSet (20)
/* ns1:DataSet */
class SOAP_CMAC _ns1__DataSet
{
public:
	char *xsd__schema;	/* required element of type xsd:schema */
	char *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE__ns1__DataSet */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DataSet() { _ns1__DataSet::soap_default(NULL); }
	virtual ~_ns1__DataSet() { }
};
#endif

#ifndef SOAP_TYPE___ns1__getSupportCity
#define SOAP_TYPE___ns1__getSupportCity (31)
/* Operation wrapper: */
struct __ns1__getSupportCity
{
public:
	_ns1__getSupportCity *ns1__getSupportCity;	/* optional element of type ns1:getSupportCity */
public:
	int soap_type() const { return 31; } /* = unique id SOAP_TYPE___ns1__getSupportCity */
};
#endif

#ifndef SOAP_TYPE___ns1__getSupportProvince
#define SOAP_TYPE___ns1__getSupportProvince (35)
/* Operation wrapper: */
struct __ns1__getSupportProvince
{
public:
	_ns1__getSupportProvince *ns1__getSupportProvince;	/* optional element of type ns1:getSupportProvince */
public:
	int soap_type() const { return 35; } /* = unique id SOAP_TYPE___ns1__getSupportProvince */
};
#endif

#ifndef SOAP_TYPE___ns1__getSupportDataSet
#define SOAP_TYPE___ns1__getSupportDataSet (39)
/* Operation wrapper: */
struct __ns1__getSupportDataSet
{
public:
	_ns1__getSupportDataSet *ns1__getSupportDataSet;	/* optional element of type ns1:getSupportDataSet */
public:
	int soap_type() const { return 39; } /* = unique id SOAP_TYPE___ns1__getSupportDataSet */
};
#endif

#ifndef SOAP_TYPE___ns1__getWeatherbyCityName
#define SOAP_TYPE___ns1__getWeatherbyCityName (43)
/* Operation wrapper: */
struct __ns1__getWeatherbyCityName
{
public:
	_ns1__getWeatherbyCityName *ns1__getWeatherbyCityName;	/* optional element of type ns1:getWeatherbyCityName */
public:
	int soap_type() const { return 43; } /* = unique id SOAP_TYPE___ns1__getWeatherbyCityName */
};
#endif

#ifndef SOAP_TYPE___ns1__getWeatherbyCityNamePro
#define SOAP_TYPE___ns1__getWeatherbyCityNamePro (47)
/* Operation wrapper: */
struct __ns1__getWeatherbyCityNamePro
{
public:
	_ns1__getWeatherbyCityNamePro *ns1__getWeatherbyCityNamePro;	/* optional element of type ns1:getWeatherbyCityNamePro */
public:
	int soap_type() const { return 47; } /* = unique id SOAP_TYPE___ns1__getWeatherbyCityNamePro */
};
#endif

#ifndef SOAP_TYPE___ns1__getSupportCity_
#define SOAP_TYPE___ns1__getSupportCity_ (49)
/* Operation wrapper: */
struct __ns1__getSupportCity_
{
public:
	_ns1__getSupportCity *ns1__getSupportCity;	/* optional element of type ns1:getSupportCity */
public:
	int soap_type() const { return 49; } /* = unique id SOAP_TYPE___ns1__getSupportCity_ */
};
#endif

#ifndef SOAP_TYPE___ns1__getSupportProvince_
#define SOAP_TYPE___ns1__getSupportProvince_ (51)
/* Operation wrapper: */
struct __ns1__getSupportProvince_
{
public:
	_ns1__getSupportProvince *ns1__getSupportProvince;	/* optional element of type ns1:getSupportProvince */
public:
	int soap_type() const { return 51; } /* = unique id SOAP_TYPE___ns1__getSupportProvince_ */
};
#endif

#ifndef SOAP_TYPE___ns1__getSupportDataSet_
#define SOAP_TYPE___ns1__getSupportDataSet_ (53)
/* Operation wrapper: */
struct __ns1__getSupportDataSet_
{
public:
	_ns1__getSupportDataSet *ns1__getSupportDataSet;	/* optional element of type ns1:getSupportDataSet */
public:
	int soap_type() const { return 53; } /* = unique id SOAP_TYPE___ns1__getSupportDataSet_ */
};
#endif

#ifndef SOAP_TYPE___ns1__getWeatherbyCityName_
#define SOAP_TYPE___ns1__getWeatherbyCityName_ (55)
/* Operation wrapper: */
struct __ns1__getWeatherbyCityName_
{
public:
	_ns1__getWeatherbyCityName *ns1__getWeatherbyCityName;	/* optional element of type ns1:getWeatherbyCityName */
public:
	int soap_type() const { return 55; } /* = unique id SOAP_TYPE___ns1__getWeatherbyCityName_ */
};
#endif

#ifndef SOAP_TYPE___ns1__getWeatherbyCityNamePro_
#define SOAP_TYPE___ns1__getWeatherbyCityNamePro_ (57)
/* Operation wrapper: */
struct __ns1__getWeatherbyCityNamePro_
{
public:
	_ns1__getWeatherbyCityNamePro *ns1__getWeatherbyCityNamePro;	/* optional element of type ns1:getWeatherbyCityNamePro */
public:
	int soap_type() const { return 57; } /* = unique id SOAP_TYPE___ns1__getWeatherbyCityNamePro_ */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (58)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 58; } /* = unique id SOAP_TYPE_SOAP_ENV__Header */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (59)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 59; } /* = unique id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (61)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 61; } /* = unique id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (64)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 64; } /* = unique id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (65)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 65; } /* = unique id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE__xsd__schema
#define SOAP_TYPE__xsd__schema (8)
typedef char *_xsd__schema;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
